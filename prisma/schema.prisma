generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model SP_orders {
  id          Int          @id @default(autoincrement())
  product     Int?         @unique(map: "product")
  value       Int
  email       String       @db.Text
  name        String       @db.Text
  address     String       @db.Text
  SP_products SP_products? @relation(fields: [product], references: [id], map: "SP_orders_ibfk_1")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model SP_products {
  id          Int        @id @default(autoincrement())
  name        String     @db.VarChar(64)
  description String     @db.Text
  price       Int
  photo       Bytes      @db.MediumBlob
  flag        Boolean
  SP_orders   SP_orders?
}

model SP_users {
  id       Int    @id @default(autoincrement())
  username String @db.VarChar(32)
  password String @db.VarChar(512)
}

model CMS {
  ID    Int      @id @default(autoincrement())
  nazev String   @db.VarChar(100)
  obsah String   @db.MediumText
  datum DateTime @db.Date
}

model CMS_dis {
  id    Int      @id @default(autoincrement())
  jmeno String   @db.VarChar(50)
  email String   @db.VarChar(50)
  text  String   @db.Text
  datum DateTime @db.Date
  IP    String   @db.VarChar(20)
}

model CMS_prispevky {
  ID    Int      @id @default(autoincrement())
  tema  String   @db.Text
  text  String   @db.MediumText
  datum DateTime @db.Date
}

model DF_prispevky {
  idDF_prispevky              Int          @id
  kdy                         DateTime?    @db.Date
  text                        String?      @db.Text
  DF_tema_idDF_tema           Int
  DF_uzivatele_idDF_uzivatele Int
  DF_tema                     DF_tema      @relation(fields: [DF_tema_idDF_tema], references: [idDF_tema], onDelete: Cascade, onUpdate: NoAction, map: "fk_DF_prispevky_DF_tema1")
  DF_uzivatele                DF_uzivatele @relation(fields: [DF_uzivatele_idDF_uzivatele], references: [idDF_uzivatele], onDelete: Cascade, map: "fk_DF_prispevky_DF_uzivatele1")
  DF_reakce                   DF_reakce[]

  @@index([DF_tema_idDF_tema], map: "fk_DF_prispevky_DF_tema1_idx")
  @@index([DF_uzivatele_idDF_uzivatele], map: "fk_DF_prispevky_DF_uzivatele1_idx")
}

model DF_reakce {
  idDF_prispevky              Int           @id
  kdy                         DateTime?     @db.Date
  text                        String?       @db.Text
  DF_prispevky_idDF_prispevky Int?
  DF_reakce_idDF_prispevky    Int?
  DF_uzivatele_idDF_uzivatele Int
  DF_prispevky                DF_prispevky? @relation(fields: [DF_prispevky_idDF_prispevky], references: [idDF_prispevky], onDelete: Cascade, map: "fk_DF_prispevky_DF_prispevky1")
  DF_reakce                   DF_reakce?    @relation("DF_reakceToDF_reakce", fields: [DF_reakce_idDF_prispevky], references: [idDF_prispevky], onDelete: Cascade, map: "fk_DF_reakce_DF_reakce1")
  other_DF_reakce             DF_reakce[]   @relation("DF_reakceToDF_reakce")
  DF_uzivatele                DF_uzivatele  @relation(fields: [DF_uzivatele_idDF_uzivatele], references: [idDF_uzivatele], onDelete: Cascade, map: "fk_DF_reakce_DF_uzivatele1")

  @@index([DF_prispevky_idDF_prispevky], map: "fk_DF_prispevky_DF_prispevky1_idx")
  @@index([DF_reakce_idDF_prispevky], map: "fk_DF_reakce_DF_reakce1_idx")
  @@index([DF_uzivatele_idDF_uzivatele], map: "fk_DF_reakce_DF_uzivatele1_idx")
}

model DF_tema {
  idDF_tema    Int            @id
  tema         String?        @db.Text
  DF_prispevky DF_prispevky[]
  DF_uzivatele DF_uzivatele[]
}

model DF_uzivatele {
  idDF_uzivatele    Int            @id
  jmeno             String?        @db.VarChar(45)
  prijmeni          String?        @db.VarChar(45)
  mail              String?        @db.VarChar(45)
  narozen           DateTime?      @db.Date
  zalozil_ucet      DateTime?      @db.Date
  DF_tema_idDF_tema Int
  DF_prispevky      DF_prispevky[]
  DF_reakce         DF_reakce[]
  DF_tema           DF_tema        @relation(fields: [DF_tema_idDF_tema], references: [idDF_tema], onDelete: Cascade, map: "fk_DF_uzivatele_DF_tema")

  @@index([DF_tema_idDF_tema], map: "fk_DF_uzivatele_DF_tema_idx")
}

model Dluznici {
  IdDluz   Int      @id @default(autoincrement())
  Jmeno    String   @db.VarChar(15)
  Prijmeni String   @db.VarChar(20)
  DatNar   DateTime @db.DateTime(0)
  Ulice    String   @db.VarChar(40)
  Psc      String   @db.VarChar(6)
  Obec     String   @db.VarChar(40)
}

model Lichvari {
  IdLich Int    @id @default(autoincrement())
  Osoba  String @db.VarChar(15)
  IdN    Int
}

model MP_bakalari {
  idbakalari Int          @id
  kantor_    Int?         @map("kantor?") @db.TinyInt
  MP_vedouci MP_vedouci[]
  MP_zak     MP_zak[]
}

model MP_prace {
  idprace                       Int        @id
  nazev                         String?    @db.VarChar(45)
  autor                         String?    @db.VarChar(45)
  popis                         String?    @db.VarChar(45)
  obrazky                       Bytes?     @db.Blob
  datum_odevzdani               DateTime?  @db.Date
  znamka                        Int?
  odkazy                        String?    @db.VarChar(200)
  soubor                        Bytes?     @db.Blob
  vedouci_prace_idvedouci_prace Int
  slovni_hodnoceni              String?    @db.VarChar(250)
  pocet_clenu                   Int?
  MP_vedouci                    MP_vedouci @relation(fields: [vedouci_prace_idvedouci_prace], references: [idvedouci_prace], onDelete: Cascade, map: "fk_prace_vedouci_prace1")
  MP_zak                        MP_zak[]

  @@index([vedouci_prace_idvedouci_prace], map: "fk_prace_vedouci_prace1_idx")
}

model MP_trida {
  idtrida    Int       @id
  nazev      String?   @db.VarChar(45)
  pocet_zaku String?   @db.VarChar(45)
  uspesnost  Int?
  rok        DateTime? @db.Date
  MP_zak     MP_zak[]
}

model MP_vedouci {
  idvedouci_prace     Int         @id
  jmeno               String?     @db.VarChar(45)
  prijmeni            String?     @db.VarChar(45)
  pocet_praci         Int?
  bakalari_idbakalari Int
  MP_prace            MP_prace[]
  MP_bakalari         MP_bakalari @relation(fields: [bakalari_idbakalari], references: [idbakalari], onDelete: Cascade, map: "fk_vedouci_bakalari1")

  @@index([bakalari_idbakalari], map: "fk_vedouci_bakalari1_idx")
}

model MP_zak {
  idzak               Int         @id
  jmeno               String?     @db.VarChar(45)
  prijmeni            String?     @db.VarChar(45)
  datum_maturity      DateTime?   @db.Date
  prace_idprace       Int
  zamereni_idzamereni Int
  trida_idtrida       Int
  bakalari_idbakalari Int
  MP_bakalari         MP_bakalari @relation(fields: [bakalari_idbakalari], references: [idbakalari], onDelete: Cascade, map: "fk_zak_bakalari1")
  MP_prace            MP_prace    @relation(fields: [prace_idprace], references: [idprace], onDelete: Cascade, map: "fk_zak_prace")
  MP_trida            MP_trida    @relation(fields: [trida_idtrida], references: [idtrida], onDelete: Cascade, map: "fk_zak_trida1")
  MP_zamereni         MP_zamereni @relation(fields: [zamereni_idzamereni], references: [idzamereni], onDelete: Cascade, map: "fk_zak_zamereni1")

  @@index([bakalari_idbakalari], map: "fk_zak_bakalari1_idx")
  @@index([prace_idprace], map: "fk_zak_prace_idx")
  @@index([trida_idtrida], map: "fk_zak_trida1_idx")
  @@index([zamereni_idzamereni], map: "fk_zak_zamereni1_idx")
}

model MP_zamereni {
  idzamereni Int      @id
  nazev      String?  @db.VarChar(45)
  MP_zak     MP_zak[]
}

model Obnosy {
  IdO    Int       @id @default(autoincrement())
  IdLich Int
  IdDluz Int
  Obnos  Int
  DatPuj DateTime  @db.DateTime(0)
  DatSpl DateTime  @db.DateTime(0)
  DatUhr DateTime? @db.DateTime(0)
}

model SoudniSpory {
  IdSpor Int     @id @default(autoincrement())
  IdLich String? @db.Text
  IdDluz String? @db.Text
  obsah  String? @db.Text
}

model UserInfo {
  ID         Int    @id @default(autoincrement())
  First_Name String @map("First Name") @db.VarChar(40)
  Last_Name  String @map("Last Name") @db.VarChar(40)
  Gender     String @db.VarChar(6)
  Age        Int
  Email      String @db.VarChar(60)
}

model blog {
  ID      Int      @id @default(autoincrement())
  titulek String   @db.Text
  text    String   @db.Text
  datum   DateTime @db.Date
  obrazek Bytes?   @db.MediumBlob
}

model ctenari {
  cisloLegitimace Int             @id
  jmeno           String          @db.VarChar(15)
  prijmeni        String          @db.VarChar(20)
  narozen         DateTime        @db.DateTime(0)
  rodneCislo      BigInt?
  testRC          Boolean?
  vek             Int?
  ulice           String          @db.VarChar(40)
  psc             String          @db.VarChar(6)
  obec            String          @db.VarChar(40)
  pohlavi         ctenari_pohlavi
  rok             DateTime        @default(dbgenerated("(`narozen`)")) @db.Date
}

model gbook {
  id      Int      @id @default(autoincrement())
  jmeno   String   @db.VarChar(50)
  predmet String?  @db.VarChar(50)
  email   String   @db.VarChar(50)
  text    String   @db.Text
  datum   DateTime @db.Date
  IP      String   @db.VarChar(20)
}

model knihy {
  signatura  Int               @id @default(autoincrement())
  nazev      String            @default("") @db.VarChar(20)
  autor      String            @default("") @db.VarChar(30)
  rok_vydani Int               @default(0) @db.Year
  nakladatel knihy_nakladatel? @default(Albatros)
}

model koncerty {
  ID        Int      @id @default(autoincrement())
  datum     DateTime @default(dbgenerated("('2019-01-01')")) @db.Date
  cas       String?  @db.VarChar(15)
  kde       String?  @db.MediumText
  co        String?  @db.MediumText
  poznamka  String?  @db.MediumText
  viditelne Boolean  @default(true)
}

model login {
  ID       Int    @id @default(autoincrement())
  username String @unique(map: "username") @db.VarChar(32)
  password String @db.VarChar(512)
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.
model nakladatelstv_ {
  nakladatel nakladatelstv__nakladatel
  obec       String                    @db.VarChar(30)
  ulice      String                    @db.VarChar(30)
  slo        Int                       @map("číslo")
  ps_        Int                       @map("psč")

  @@map("nakladatelství")
  @@ignore
}

model obd_ln_ky {
  id    Int  @id @default(autoincrement())
  a     Int
  b     Int
  obvod Int?
  obsah Int?

  @@map("obdélníky")
}

model pocitadlo2 {
  ID       Int      @id @default(autoincrement())
  IP       String?  @db.VarChar(15)
  IP_local String?  @db.VarChar(15)
  datum    DateTime @db.Date
}

model vypujcky {
  idVypujcky      Int       @id
  signatura       Int       @default(0)
  cisloLegitimace Int       @default(0)
  datumVypujcky   DateTime  @default(dbgenerated("('0000-00-00')")) @db.Date
  datumVraceni    DateTime? @db.Date
  pocetDni        Int

  @@index([cisloLegitimace], map: "cislo_legitimace")
  @@index([signatura], map: "signatura")
}

model wp_commentmeta {
  meta_id    BigInt  @id @default(autoincrement()) @db.UnsignedBigInt
  comment_id BigInt  @default(0) @db.UnsignedBigInt
  meta_key   String? @db.VarChar(255)
  meta_value String? @db.LongText

  @@index([comment_id], map: "comment_id")
  @@index([meta_key(length: 191)], map: "meta_key")
}

model wp_comments {
  comment_ID           BigInt   @id @default(autoincrement()) @db.UnsignedBigInt
  comment_post_ID      BigInt   @default(0) @db.UnsignedBigInt
  comment_author       String   @db.TinyText
  comment_author_email String   @default("") @db.VarChar(100)
  comment_author_url   String   @default("") @db.VarChar(200)
  comment_author_IP    String   @default("") @db.VarChar(100)
  comment_date         DateTime @default(dbgenerated("('0000-00-00 00:00:00')")) @db.DateTime(0)
  comment_date_gmt     DateTime @default(dbgenerated("('0000-00-00 00:00:00')")) @db.DateTime(0)
  comment_content      String   @db.Text
  comment_karma        Int      @default(0)
  comment_approved     String   @default("1") @db.VarChar(20)
  comment_agent        String   @default("") @db.VarChar(255)
  comment_type         String   @default("comment") @db.VarChar(20)
  comment_parent       BigInt   @default(0) @db.UnsignedBigInt
  user_id              BigInt   @default(0) @db.UnsignedBigInt

  @@index([comment_approved, comment_date_gmt], map: "comment_approved_date_gmt")
  @@index([comment_author_email(length: 10)], map: "comment_author_email")
  @@index([comment_date_gmt], map: "comment_date_gmt")
  @@index([comment_parent], map: "comment_parent")
  @@index([comment_post_ID], map: "comment_post_ID")
}

model wp_links {
  link_id          BigInt   @id @default(autoincrement()) @db.UnsignedBigInt
  link_url         String   @default("") @db.VarChar(255)
  link_name        String   @default("") @db.VarChar(255)
  link_image       String   @default("") @db.VarChar(255)
  link_target      String   @default("") @db.VarChar(25)
  link_description String   @default("") @db.VarChar(255)
  link_visible     String   @default("Y") @db.VarChar(20)
  link_owner       BigInt   @default(1) @db.UnsignedBigInt
  link_rating      Int      @default(0)
  link_updated     DateTime @default(dbgenerated("('0000-00-00 00:00:00')")) @db.DateTime(0)
  link_rel         String   @default("") @db.VarChar(255)
  link_notes       String   @db.MediumText
  link_rss         String   @default("") @db.VarChar(255)

  @@index([link_visible], map: "link_visible")
}

model wp_options {
  option_id    BigInt @id @default(autoincrement()) @db.UnsignedBigInt
  option_name  String @unique(map: "option_name") @default("")
  option_value String @db.LongText
  autoload     String @default("yes") @db.VarChar(20)

  @@index([autoload], map: "autoload")
}

model wp_postmeta {
  meta_id    BigInt  @id @default(autoincrement()) @db.UnsignedBigInt
  post_id    BigInt  @default(0) @db.UnsignedBigInt
  meta_key   String? @db.VarChar(255)
  meta_value String? @db.LongText

  @@index([meta_key(length: 191)], map: "meta_key")
  @@index([post_id], map: "post_id")
}

model wp_posts {
  ID                    BigInt   @id @default(autoincrement()) @db.UnsignedBigInt
  post_author           BigInt   @default(0) @db.UnsignedBigInt
  post_date             DateTime @default(dbgenerated("('0000-00-00 00:00:00')")) @db.DateTime(0)
  post_date_gmt         DateTime @default(dbgenerated("('0000-00-00 00:00:00')")) @db.DateTime(0)
  post_content          String   @db.LongText
  post_title            String   @db.Text
  post_excerpt          String   @db.Text
  post_status           String   @default("publish") @db.VarChar(20)
  comment_status        String   @default("open") @db.VarChar(20)
  ping_status           String   @default("open") @db.VarChar(20)
  post_password         String   @default("") @db.VarChar(255)
  post_name             String   @default("") @db.VarChar(200)
  to_ping               String   @db.Text
  pinged                String   @db.Text
  post_modified         DateTime @default(dbgenerated("('0000-00-00 00:00:00')")) @db.DateTime(0)
  post_modified_gmt     DateTime @default(dbgenerated("('0000-00-00 00:00:00')")) @db.DateTime(0)
  post_content_filtered String   @db.LongText
  post_parent           BigInt   @default(0) @db.UnsignedBigInt
  guid                  String   @default("") @db.VarChar(255)
  menu_order            Int      @default(0)
  post_type             String   @default("post") @db.VarChar(20)
  post_mime_type        String   @default("") @db.VarChar(100)
  comment_count         BigInt   @default(0)

  @@index([post_author], map: "post_author")
  @@index([post_name(length: 191)], map: "post_name")
  @@index([post_parent], map: "post_parent")
  @@index([post_type, post_status, post_date, ID], map: "type_status_date")
}

model wp_term_relationships {
  object_id        BigInt @default(0) @db.UnsignedBigInt
  term_taxonomy_id BigInt @default(0) @db.UnsignedBigInt
  term_order       Int    @default(0)

  @@id([object_id, term_taxonomy_id])
  @@index([term_taxonomy_id], map: "term_taxonomy_id")
}

model wp_term_taxonomy {
  term_taxonomy_id BigInt @id @default(autoincrement()) @db.UnsignedBigInt
  term_id          BigInt @default(0) @db.UnsignedBigInt
  taxonomy         String @default("") @db.VarChar(32)
  description      String @db.LongText
  parent           BigInt @default(0) @db.UnsignedBigInt
  count            BigInt @default(0)

  @@unique([term_id, taxonomy], map: "term_id_taxonomy")
  @@index([taxonomy], map: "taxonomy")
}

model wp_termmeta {
  meta_id    BigInt  @id @default(autoincrement()) @db.UnsignedBigInt
  term_id    BigInt  @default(0) @db.UnsignedBigInt
  meta_key   String? @db.VarChar(255)
  meta_value String? @db.LongText

  @@index([meta_key(length: 191)], map: "meta_key")
  @@index([term_id], map: "term_id")
}

model wp_terms {
  term_id    BigInt @id @default(autoincrement()) @db.UnsignedBigInt
  name       String @default("") @db.VarChar(200)
  slug       String @default("") @db.VarChar(200)
  term_group BigInt @default(0)

  @@index([name(length: 191)], map: "name")
  @@index([slug(length: 191)], map: "slug")
}

model wp_usermeta {
  umeta_id   BigInt  @id @default(autoincrement()) @db.UnsignedBigInt
  user_id    BigInt  @default(0) @db.UnsignedBigInt
  meta_key   String? @db.VarChar(255)
  meta_value String? @db.LongText

  @@index([meta_key(length: 191)], map: "meta_key")
  @@index([user_id], map: "user_id")
}

model wp_users {
  ID                  BigInt   @id @default(autoincrement()) @db.UnsignedBigInt
  user_login          String   @default("") @db.VarChar(60)
  user_pass           String   @default("") @db.VarChar(255)
  user_nicename       String   @default("") @db.VarChar(50)
  user_email          String   @default("") @db.VarChar(100)
  user_url            String   @default("") @db.VarChar(100)
  user_registered     DateTime @default(dbgenerated("('0000-00-00 00:00:00')")) @db.DateTime(0)
  user_activation_key String   @default("") @db.VarChar(255)
  user_status         Int      @default(0)
  display_name        String   @default("") @db.VarChar(250)

  @@index([user_email], map: "user_email")
  @@index([user_login], map: "user_login_key")
  @@index([user_nicename], map: "user_nicename")
}

enum nakladatelstv__nakladatel {
  Albatros
  Odeon
  Ottovo
  EMPTY_ENUM_VALUE @map("")

  @@map("nakladatelství_nakladatel")
}

enum knihy_nakladatel {
  Albatros
  Ottovo
  Odeon
}

enum ctenari_pohlavi {
  mu_ @map("muž")
  ena @map("žena")
}
